/* Copyright 2017 Hakan Metin - All rights reserved */

#ifndef INCLUDE_DSB_ORDERMANAGER_H_
#define INCLUDE_DSB_ORDERMANAGER_H_

#include <vector>
#include <string>
#include <iostream>
#include <memory>
#include <algorithm>
#include <map>

#include "cosy/Types.h"
#include "cosy/Permutation.h"
#include "cosy/Orbits.h"

namespace cosy {

enum OrderType {
    UNKNOWN,
    INCREASING,
    DECREASING,
    OCCURENCE,
    CLASS_INCREASING,
    CLASS_OCCURENCE,
    BREAKID,
    CUSTOM
};

template<typename T>
struct ValueOrderLt {
        const std::vector<T>& values;
        bool operator() (unsigned int i, unsigned int j) {
            if (values[i] == values[j])
                return i < j;
            return values[i] > values[j];
        }
        explicit ValueOrderLt(const std::vector<T>& v) : values(v) {}
};

class OrderManager {
 public:
        OrderManager(const unsigned int num_vars,
                     const std::vector<int>& occurences,
                     const std::vector<std::vector<Var>>& orbits,
                     const std::vector<Permutation*>& permutations) :
            _num_vars(num_vars),
            _type(UNKNOWN),
            _occurences(occurences),
            _orbits(orbits),
            _permutations(permutations) {}

        ~OrderManager() {}

        void generate(OrderType type);
        void custom(const std::vector<Lit>& order) {
            _type = CUSTOM;
            _order = order;
        }

        const std::vector<Lit>& order() const { return _order; }
        const std::string orderString() const;

 private:
        const unsigned int _num_vars;
        OrderType _type;
        std::vector<Lit> _order;

        std::vector<int> _occurences;
        std::vector< std::vector<Var> > _orbits;
        std::vector<Permutation *> _permutations;

        void increase_order();
        void decrease_order();
        void occurence_order();
        void class_increase_order();
        void class_occurence_order();
        void breakid_order();
};

inline void OrderManager::generate(OrderType type) {
    switch (type) {
    case INCREASING: return increase_order();
    case DECREASING: return decrease_order();
    case OCCURENCE:  return occurence_order();
    case CLASS_INCREASING: return class_increase_order();
    case CLASS_OCCURENCE: return class_occurence_order();
    case BREAKID: return breakid_order();
    default:
        assert(false);
    }
}

inline const std::string OrderManager::orderString() const {
    switch (_type) {
    case UNKNOWN:          return std::string("unknown");
    case INCREASING:       return std::string("increase");
    case DECREASING:       return std::string("decrease");
    case OCCURENCE:        return std::string("occurence");
    case CLASS_INCREASING: return std::string("class increase");
    case CLASS_OCCURENCE:  return std::string("class occurence");
    case BREAKID:          return std::string("breakid");
    case CUSTOM:           return std::string("custom");
    default: assert(false);
    }
    return "";
}

inline void OrderManager::increase_order() {
    _type = INCREASING;

    for (int i = 1; i <= static_cast<int>(_num_vars); i++)
        _order.push_back(i);
    for (int i = 1; i <= static_cast<int>(_num_vars); i++)
        _order.push_back(negate(i));
}

inline void OrderManager::decrease_order() {
    _type = DECREASING;


    std::vector<int> o({

1,1229,1713,2540,142,1696,2734,2678,871,298,79,2137,2550,349,30,1591,2054,576,832,800,1354,1068,17,1805,1693,1645,1557,1249,1890,2740,2320,1604,794,1965,583,1834,562,255,2521,2300,2339,253,481,202,1161,2301,90,1626,2013,432,388,80,446,1125,238,440,1291,502,700,2520,984,323,1191,1334,1167,1065,2208,2621,1653,1868,2630,759,2542,943,2115,2758,534,2164,1146,541,2125,1687,2627,2772,2343,1044,1303,853,2428,1253,1269,2092,665,2530,2708,1424,1933,1919,2402,1554,2119,1187,497,415,1340,2321,886,1988,1651,620,2116,1966,2065,2456,2557,2286,956,1854,1099,1092,1903,1943,1535,1067,2598,1144,262,2165,951,2773,1796,1781,1128,2484,2278,1209,2573,2268,2192,129,65,1081,1731,1981,2431,1684,2662,2716,2249,2322,1737,533,1897,2018,965,1577,264,1338,1365,1492,1894,748,1533,1560,944,1542,2211,414,1256,286,77,2709,837,880,2724,1218,2308,1598,2132,290,1790,1464,2449,1350,468,2438,278,268,2016,124,1343,1301,2258,2596,1662,2178,1697,157,1482,1371,1744,577,2537,1402,644,689,1567,2145,1387,1959,319,1443,1033,2717,2448,1208,2356,2780,395,771,949,1129,2568,705,2642,1668,2635,127,1881,1773,1749,120,2128,331,547,2055,149,887,1200,447,950,683,2207,1977,2495,2052,518,661,2358,2111,396,716,490,2057,480,2414,2460,2400,1691,945,2099,1719,350,2470,750,1958,1103,780,2241,1165,2563,1278,2494,2765,2727,2794,643,868,199,1771,1059,103,967,737,1063,2457,1276,2559,709,1579,338,1838,1451,2292,280,1929,1159,545,1712,843,1173,915,1168,570,408,1914,2693,1549,855,1359,1367,318,2002,2399,2408,1277,693,2611,2527,151,1302,2401,1295,18,145,2019,2429,333,227,2703,2271,596,972,155,1889,110,995,2657,627,466,834,641,1619,1015,2479,1686,2474,2075,1325,2252,553,1134,2426,2790,1637,314,720,738,2592,1607,2302,2072,2652,1442,252,1319,2341,528,710,2248,1120,1071,823,2503,1324,2,852,867,2012,1091,212,2763,372,153,128,1236,1450,2565,1819,162,220,1053,1634,2729,1355,779,725,1600,63,346,1085,1095,1386,1333,666,2355,672,1924,582,1247,2620,1552,723,498,2702,419,2127,1145,1998,812,2001,891,1547,1661,1238,2381,1836,66,1592,2370,1266,2328,70,1937,2289,1647,2639,564,592,523,732,2212,1680,2231,2265,2743,2690,2180,994,476,1188,1787,452,1487,1224,1152,1124,1911,814,686,1096,2700,875,2706,1172,2156,32,193,2406,2205,1508,1734,2151,2204,924,1880,1913,2579,1312,2267,624,633,893,2041,1353,1031,1748,1676,1593,2123,2524,1070,1587,47,741,2346,493,2126,573,221,809,2713,1562,617,31,1956,1101,132,1399,2405,2222,1506,258,2313,691,460,172,2617,2670,2418,1886,895,1964,947,2759,445,1104,959,1529,341,276,283,1297,76,2264,36,2348,1357,598,1185,1428,1321,2290,778,88,1763,2327,2038,180,1412,1658,470,1051,754,1260,963,1471,2022,1960,1527,2261,1912,704,1859,2184,1975,85,827,726,1824,599,121,1710,1245,2610,2061,1267,1012,1298,2129,435,2419,1515,1037,2707,826,1246,478,156,2025,2275,183,1817,1231,1753,1705,1216,2602,2508,2751,1949,2518,2239,669,1089,2685,2791,923,910,2336,2141,1615,856,357,762,1706,558,2063,1227,667,1728,144,2359,1407,1088,417,2073,2675,2376,609,1434,2754,2058,1495,529,1175,1281,2545,2311,1158,1848,364,389,1841,1215,2196,639,763,2096,434,687,2028,2522,39,2285,2640,2506,673,1117,890,148,2070,554,2188,1513,1612,1339,1743,1906,494,1470,1617,425,1768,1659,2394,1663,2325,2723,792,2519,2699,1707,7,503,1742,635,22,2169,2367,1700,1618,2726,1049,1419,1395,58,1009,1925,916,461,2388,1620,585,1772,2701,2280,1559,2024,897,2504,2360,857,997,1690,955,1955,2721,2663,1344,2574,181,798,2424,173,378,1406,2386,819,862,1414,786,89,143,2262,291,1251,2467,1683,504,1569,1953,1770,71,825,1947,1212,612,369,135,400,2375,2257,1871,1122,2390,2606,107,300,2314,436,680,1996,1532,985,2736,2162,1997,937,2380,773,2093,1724,428,2441,1254,2391,2800,2547,1290,2003,1822,1436,2788,1138,251,1435,772,2154,361,1239,1808,1472,1545,2263,1884,115,345,591,1002,2147,362,753,1509,102,329,926,2150,836,1522,842,802,785,1555,187,2062,1264,2601,215,1084,1809,84,1411,360,1999,2756,768,1995,1597,2259,2485,131,1621,2027,1151,299,1258,1882,2684,146,2464,62,822,2491,873,380,2136,55,1570,602,790,1098,1741,1938,438,918,274,2697,2439,453,154,971,409,991,365,1561,1108,1486,2732,645,1478,1711,1673,1455,2234,2638,1536,626,1446,2785,2783,2443,2284,2354,2529,1390,38,1332,1449,1962,218,2771,954,2244,1892,29,2628,1193,530,2738,1066,1837,1441,1669,846,1740,1825,572,1351,1695,225,968,1109,2489,1876,1835,580,1610,742,2483,261,1474,170,1141,311,1203,317,939,1113,1115,2725,513,2254,1148,1656,1192,2079,2374,223,2679,859,2600,472,2555,2532,1467,2667,2160,2245,1516,1860,1968,2577,1510,2583,1233,2560,217,2587,41,2698,2618,2095,1879,1675,1643,334,2218,1624,1391,2044,2750,1918,1582,1685,1715,1672,1342,559,721,2538,2161,1198,731,1605,2472,953,975,2462,1642,2567,1679,1865,2696,2158,511,851,2453,1581,1401,1105,2782,355,2615,2556,292,2451,717,25,374,2608,527,197,1553,2287,1127,1588,1602,634,1729,2195,896,78,2085,2368,370,1317,1611,1242,2282,1677,15,1589,2315,1813,330,1438,1989,2659,1232,467,1614,1786,1018,1121,1641,1520,1382,239,282,952,1429,1709,1829,2624,2586,845,2705,560,2561,1314,1885,730,159,53,2649,1534,1299,1080,1415,2593,1625,2739,2590,2133,2387,646,1584,2499,1038,1157,1961,611,579,2575,2711,2411,2312,1797,1136,1182,2144,1369,1792,2229,1631,1788,2306,1623,1110,2515,2476,774,1652,387,2295,1230,2006,1847,1568,614,2511,2337,366,747,2007,2488,1902,2017,1648,936,1609,1586,1214,1057,101,1842,2463,1951,210,2037,2009,2138,320,2051,515,2120,1272,1271,863,2089,1010,999,2221,1901,1541,808,1726,2761,2461,1777,1578,2210,2081,1074,734,2235,1035,807,1540,2202,1288,2616,1793,1544,1523,881,1217,2121,2415,293,1531,1073,1286,1422,1189,116,636,706,1454,1220,1738,1665,240,2692,2332,2720,1166,2118,50,1408,1469,2632,43,2747,1646,2000,308,226,2486,1430,2569,1465,1169,2420,2036,2407,270,1418,1764,1944,2755,930,1223,1941,2764,1650,4,2230,1050,1219,974,247,2047,1155,1425,484,2237,1270,902,2227,1826,1752,2584,2769,699,1733,2645,1164,222,2030,1898,136,211,1398,2636,475,2613,1021,496,294,1844,1257,2434,510,485,782,1427,942,1197,885,1178,1888,940,117,2069,2086,1263,2440,578,2331,1462,483,2068,2654,1785,1807,2176,1318,1723,889,1225,130,1054,2139,430,1248,424,1201,406,2742,2688,1565,1862,179,1630,2648,34,647,457,2157,2366,2293,903,1950,2281,2385,2633,1368,2664,2206,335,996,2396,2427,623,321,2397,2333,196,1655,872,676,793,2377,1075,1499,2733,2607,958,2372,1139,2745,2768,2412,2260,2446,1528,204,2741,1635,2276,1757,1221,833,1812,2350,1150,695,1969,2351,760,653,2318,1657,206,2644,1982,2536,884,2247,393,2298,473,411,1638,1633,1984,1815,1985,2201,2409,594,1147,1466,1556,2578,2177,2203,2082,2797,1863,1190,1751,182,2744,1804,450,2064,2217,1736,520,1891,2338,1585,1026,2553,2799,1699,948,2189,2107,147,195,933,2112,344,679,1932,2436,10,2558,405,56,6,100,448,91,1347,2469,1133,375,2043,201,787,158,1043,1005,431,1521,2480,1142,835,2076,1775,1915,386,353,407,207,2430,506,878,979,2143,1973,1846,2010,87,1849,1784,2190,1717,1840,2046,1622,451,488,59,2757,1765,858,312,2035,2622,701,2251,1632,2148,1024,921,2653,1014,1056,1887,248,801,1179,371,1504,1023,914,745,469,660,2074,1572,203,2199,11,2682,604,42,1750,2478,1176,82,1823,123,2077,813,1082,209,1855,114,1583,2444,847,648,810,489,2581,692,1090,2122,1928,14,1346,306,1993,2373,632,2570,51,339,1292,631,907,1111,398,928,913,1573,2728,444,1381,2194,589,1858,2671,2714,1972,1019,68,2674,464,2105,531,150,2224,2576,23,189,535,108,1107,539,1052,1801,724,2534,265,37,2071,1599,1397,722,198,2748,482,19,1664,563,1392,1378,111,397,2502,761,1476,2789,205,1963,919,1384,1666,1196,1097,2186,188,839,2049,2651,2080,426,2669,850,1008,1908,1778,1323,1287,804,1780,391,46,540,922,521,517,844,441,2181,2029,735,352,1132,744,584,821,1909,690,1718,2588,1100,1046,894,1761,20,2059,64,1199,2296,2117,1755,348,1305,2198,249,1990,1432,137,304,1629,1310,806,1873,2319,2625,987,2317,2330,1640,817,2619,1930,2793,2629,621,57,522,289,28,1394,2626,1526,1086,713,1396,1309,296,2612,1265,966,272,1194,831,1022,1493,465,2379,73,118,2715,848,1576,1473,1388,909,263,1594,2067,2539,1514,526,1255,2040,2673,2340,1375,492,93,495,164,865,1463,1721,242,2026,783,1546,412,2182,869,1814,607,178,2233,1064,2004,2525,1363,1878,2549,2752,1423,1374,418,1352,2347,2329,1702,829,1830,324,2767,549,838,1261,133,394,1905,277,1360,1094,756,2305,1827,2447,1558,1250,305,1207,1004,1222,1483,99,2034,2435,688,213,2784,1345,2544,1237,1240,1304,486,1330,9,1864,1177,1722,736,586,650,1828,1967,2512,854,392,1926,1028,2270,1366,1042,351,439,1006,176,2236,2595,2487,2087,379,271,654,512,191,194,509,2232,228,840,2142,797,670,2191,382,866,1694,12,696,711,1393,1496,281,1900,1077,655,2760,557,13,1746,2297,2362,770,2454,2048,2209,2792,615,163,26,1032,1341,625,1252,1839,1001,423,269,367,1112,1987,246,1210,1461,326,2255,2066,1170,1060,2562,456,2134,682,935,1502,216,1036,232,1490,347,1211,463,1328,1732,1720,455,1910,565,861,901,257,900,126,912,1268,139,1774,2796,2170,1671,237,1818,1760,1123,2665,1131,2242,702,1564,303,2310,1078,2102,2032,1986,96,571,1326,122,168,2482,1639,2517,767,931,1377,420,904,1957,1766,1861,354,160,459,2580,575,2687,1055,2283,2497,1440,2173,1745,1417,2776,1316,2349,2021,588,2660,2215,2589,2171,2238,2680,2183,514,2730,410,2591,1762,961,1670,743,2513,49,208,443,1020,1940,1660,1803,1799,1259,2213,477,1832,2694,2365,781,2465,313,1457,708,1716,619,2168,83,2167,2496,2466,2216,1877,815,356,2582,2307,2240,1810,1682,2050,1337,2778,551,2393,824,727,2452,2749,2594,613,2523,1153,1895,301,1505,2548,1979,1140,2777,2564,1667,2605,2084,982,427,2551,508,1530,1883,462,1606,1628,48,2369,957,69,1539,2683,259,2014,1380,888,1931,2110,2526,1833,243,343,125,1041,1370,109,2646,241,2219,401,1102,1163,92,1934,1445,2344,500,224,638,177,138,2023,542,1980,214,2531,1537,1404,1431,1820,550,1143,938,2131,2403,474,1262,1779,685,2291,2614,1186,2691,1119,1613,662,946,769,2039,1730,2345,707,791,112,235,2256,1243,796,174,1954,1916,61,134,1336,1389,2597,2623,2704,1783,44,757,2382,657,2357,254,874,2309,449,1349,413,2179,1497,1603,610,536,2214,1688,2458,630,75,2677,629,2335,2269,285,1444,169,2422,830,2712,2193,1061,2114,316,166,568,1548,1866,1183,776,27,1130,1156,2352,1767,1409,2661,1551,2779,566,2672,969,2637,674,8,1308,479,106,2389,499,2279,2109,1575,758,1857,1235,1791,1518,2113,1776,1045,1069,2033,556,1379,309,2571,964,1948,1335,2689,637,1627,2546,2501,2604,703,342,2384,877,929,267,962,766,976,892,879,2762,1293,675,920,993,1678,2153,40,2228,2507,1280,1507,1500,2541,2695,1875,2200,2031,501,1180,327,165,2599,729,2304,1769,917,2187,340,399,1331,2094,1945,1420,816,1405,2735,1282,390,1896,1899,543,1971,1459,175,1410,1491,1213,2658,1025,119,561,1385,977,233,2253,1795,230,98,2088,803,2246,1920,980,1135,2166,1974,1939,1106,1574,1118,1708,2473,2416,2106,1306,1361,1228,1244,1040,2294,185,608,1654,567,538,1923,2361,694,1942,1756,1907,1800,719,1976,471,2493,2383,601,2410,231,1062,574,234,2152,250,1160,332,2324,2442,2676,1571,1400,960,52,751,1000,2334,1869,1701,1149,2097,1983,141,266,905,739,416,1917,2364,287,1030,1283,307,2490,2277,1426,1433,941,2175,442,1320,421,883,336,1294,437,2731,876,67,714,1181,788,1681,184,288,1475,1616,383,2083,1538,811,1093,587,2572,1154,2272,1003,2005,605,94,1016,989,97,337,5,190,1234,45,752,1698,297,1843,1704,2719,376,1590,2288,1315,2172,546,2060,649,581,1501,2140,1649,2528,1608,2655,2455,2124,2498,2795,2135,1072,764,2585,849,616,1692,1754,1714,1162,864,1484,2603,86,749,368,978,1313,1674,2668,1460,1821,1481,1039,2656,652,2686,2432,1376,384,385,363,1727,2413,2566,1296,454,2775,2395,618,381,555,2437,21,1468,1027,2746,1543,2459,2378,2710,167,746,1284,2045,2766,664,322,678,1372,2647,2323,1512,1851,2091,2371,1992,219,2250,33,990,1498,1794,2417,487,519,1845,140,2554,1480,1416,1034,1204,593,870,186,2787,1453,16,1184,1946,1789,925,1047,2316,377,820,2098,279,697,2471,310,315,359,2543,1922,1747,1373,681,433,2421,1563,1307,2552,2159,1952,1356,404,2163,2516,2174,244,552,642,2786,35,2226,1689,1329,245,1477,2078,1273,524,72,677,1703,2326,986,2103,2643,733,2108,1079,818,2514,640,1893,260,1758,1087,1867,1485,2008,1403,2535,161,1725,715,656,671,2020,1226,1076,2015,597,1364,2475,1636,1566,1921,1759,2722,273,740,171,1872,1517,2100,2798,2225,74,899,1202,24,1029,2445,1852,2042,1525,358,600,1798,1274,1348,590,1458,927,595,1205,60,1595,325,1601,1991,2011,403,1479,1279,1831,981,2149,422,2641,537,491,988,1850,113,2056,603,795,1327,1870,882,295,784,2243,1383,2104,2404,698,1114,712,1811,1735,765,2753,2533,1806,275,658,1580,1596,525,906,3,755,1174,911,2666,998,1013,775,1978,908,1503,973,1126,1058,1358,799,1782,2273,659,1448,284,1519,1936,54,1011,1421,236,516,1289,718,192,2130,1524,402,229,777,2303,1171,1285,1494,970,1048,1874,992,104,1195,2634,507,1935,1994,2185,805,622,569,505,1439,1853,934,256,302,668,2505,1739,1644,2609,1802,2481,2392,1452,1489,860,2266,1550,663,2492,2737,1447,1137,1927,2220,2155,544,2223,2631,1456,628,1206,2650,1437,2770,2053,841,2101,1322,728,1488,458,1083,2510,1311,789,1904,1362,1116,1413,81,2450,2398,2353,898,1816,932,2423,684,1007,2425,2433,532,606,2274,651,983,2781,1275,2090,2342,2509,2197,2718,373,2500,95,828,328,105,2299,2146,548,1511,152,200,2681,429,1017,1970,2774,1241,1300,2468,2477,2363,1856


             });


    std::unordered_set<int> s(o.begin(), o.end());

    for (int i=1; i<= _num_vars; i++)
        if (s.find(i) == s.end())
            o.push_back(i);

    for (auto a : o)
        _order.push_back(a);
    for (auto a : o)
        _order.push_back(negate(a));



    // for (int i = static_cast<int>(_num_vars); i > 0; i--)
    //     _order.push_back(i);
    // for (int i = static_cast<int>(_num_vars); i > 0; i--)
    //     _order.push_back(negate(i));
}

inline void OrderManager::occurence_order() {
    _type = OCCURENCE;

    std::vector<int> occurences = _occurences;
    std::vector<int> indexes;
    indexes.assign(_num_vars + 1, 0);

    for (unsigned int i = 1; i <= _num_vars; i++)
        indexes[i] = i;
    std::sort(indexes.begin() + 1, indexes.end(),
              ValueOrderLt<int>(occurences));

    for (unsigned int i = 1; i <= _num_vars; i++)
        _order.push_back(indexes[i]);
    for (unsigned int i = 1; i <= _num_vars; i++)
        _order.push_back(negate(indexes[i]));

    std::cout << "ORDER ";
    for (const Lit& l : _order)
        std::cout << l << " ";
    std::cout << std::endl;

}

inline void OrderManager::class_increase_order() {
    _type = CLASS_INCREASING;

    for (const std::vector<Var>& orbit : _orbits)
        for (const Var var : orbit)
            _order.push_back(var);

    for (const std::vector<Var>& orbit : _orbits)
        for (const Var var : orbit)
            _order.push_back(negate(var));

    // TODO(user): Maybe we can also sort the orbit's order
}

inline void OrderManager::class_occurence_order() {
    _type = CLASS_OCCURENCE;

    std::vector< std::vector<Var> > orbits = _orbits;
    std::vector<int> orbits_order;
    std::vector<int> orbits_occurence;
    std::vector<int> occurences = _occurences;



    for (std::vector<Var>& orbit : orbits)
        std::sort(orbit.begin(), orbit.end(), ValueOrderLt<int>(occurences));

    for (unsigned int i = 0; i < orbits.size(); i++) {
        orbits_order.push_back(i);
        // Sort with the highest occurence of each orbit
        // TODO(user): maybe test also with sum of occurences in orbit
        orbits_occurence.push_back(occurences[orbits[i][0]]);
    }
    std::sort(orbits_order.begin(), orbits_order.end(),
              ValueOrderLt<int>(orbits_occurence));

    for (int index : orbits_order) {
        const std::vector<Var>& orbit = orbits[index];
        for (const Var& var : orbit)
            _order.push_back(var);
    }
    for (int index : orbits_order) {
        const std::vector<Var>& orbit = orbits[index];
        for (const Var& var : orbit)
            _order.push_back(negate(var));
    }

    std::cout << "ORDER ";
    for (const Lit& l : _order)
        std::cout << l << " ";
    std::cout << std::endl;

}

inline void OrderManager::breakid_order() {
    Orbits orbits;
    std::vector<Var> order;
    std::vector<Var> largestOrbit;
    std::vector<Permutation*> Q(_permutations);
    std::vector<Permutation*> filter;

    std::map<Var, int> occurences;  // number of occurence in Q
    Var next = VAR_UNDEF;

    _type = BREAKID;

    while (Q.size() > 0) {
        occurences.clear();


        orbits.compute(Q);
        largestOrbit = orbits.largestOrbit();


        std::cout << "ORBITS :" << std::endl;

        orbits.debugPrint();

        std::cout << "LARGEST ORBIT :";
        for (const Var& v : largestOrbit)
            std::cout << v << " ";
        std::cout << std::endl;


        for (Permutation* p : Q) {
            p->debugPrint();
            std::cout << std::endl;
        }


        /* Compute occurence of largestOrbit Q */
        for (const Var& var : largestOrbit) {
            for (const Permutation* p : Q) {
                if (p->contains(var))
                    occurences[var]++;
            }
        }

        /* Get minimum of occurences Orbit Q */
        next = largestOrbit[0];
        int occ = occurences.at(next);
        for (const std::pair<Var, int>& pair : occurences) {
            Var v = pair.first;
            int value = pair.second;
            std::cout << "OCC " << v << " = " << value << std::endl;
            if (value < occ) {
                next = v;
                occ = value;
            }
        }
        std::cout << "NEXT " << next << std::endl;
        order.push_back(next);

        filter.clear();
        for (Permutation* p : Q) {
            if (!p->contains(next))
                filter.push_back(p);

        }

        Q = filter;
    }

    /* Complete order */
    std::unordered_set<Var> in(order.begin(), order.end());

    /* Fill Occurence */
    // std::vector<int> occurences_var = _occurences;
    // std::vector<int> indexes;
    // indexes.assign(_num_vars + 1, 0);

    // for (unsigned int i = 1; i <= _num_vars; i++)
    //     indexes[i] = i;
    // std::sort(indexes.begin() + 1, indexes.end(),
    //           ValueOrderLt<int>(occurences_var));

    // for (unsigned int i = 1; i <= _num_vars; i++)
    //     if (in.find(indexes[i]) == in.end())
    //         order.push_back(indexes[i]);


    /* Fill lex order */
    for (unsigned int i=1; i<=_num_vars; i++)
        if (in.find(i) == in.end())
            order.push_back(i);

    for (const Var var : order)
        _order.push_back(var);
    for (Var var : order)
        _order.push_back(negate(var));

    std::cout << "ORDER ";
    for (const Lit& l : _order)
        std::cout << l << " ";
    std::cout << std::endl;

}


}  // namespace cosy

#endif  // INCLUDE_DSB_ORDERMANAGER_H_

/*
 * Local Variables:
 * mode: c++
 * indent-tabs-mode: nil
 * End:
 */
